# -*- mode: org; fill-column: 99; -*-
#+TITLE:Mastering Org-Mode
#+AUTHOR:WLHarvey4
#+EMAIL:wlharvey4@mac.com
#+DATE:<2018-12-10 Mon 11:03>
#+VERSION:{{{version}}}
#+MACRO:version 0.2.1

#+TEXINFO_FILENAME:mastering-org.info
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER:
#+TEXINFO_POST_HEADER:
#+SUBTITLE:Version {{{version}}} {{{time(%F %R)}}}
#+SUBAUTHOR:
#+TEXINFO_DIR_CATEGORY:Org-Mode
#+TEXINFO_DIR_TITLE:Mastering Org-Mode
#+TEXINFO_DIR_DESC:How to master org-mode in a decade
#+TEXINFO_PRINTED_TITLE:How To Master Org-Mode In A Decade

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today

#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.1.14)
#+LATEX_HEADER:

* Glossary
  - ~#+KEY:~ :: *In-buffer setting* ==> See [[https://orgmode.org/org.html#In_002dbuffer-settings][In-Buffer Settings]]

    /In-buffer settings/ start with ‘#+’, followed by a keyword, a colon, and then a word for each
                setting.  There are dozens upon dozens of these.  To see an alphabetical list of
                (most) of them, look in the index under ~#~.  Unfortunately, not all are in the
                index.

    ==> [[https://orgmode.org/org.html#Main-Index][#-Index]]

    You will see numerous /in-buffer settings/ scattered throughout the manual and tutorials, but
                they are not introduced prior, so they can be somewhat cryptic at first.

    In addition to /in-buffer settings/, there is another similar construct called *OPTIONS*
                (~#+OPTIONS:~) which is used to set in-buffer settings as well (primarily for
                export settings).  /Options/ uses a large set of short, abbreviated key-value pairs
                ([[https://orgmode.org/manual/Export-settings.html#Export-settings][Options]]).  Unfortunately, the manual uses the term 'options' for in-buffer
                settings as well as ~OPTIONS~.

  - Capture :: *Capture* lets you quickly store notes with little interruption of your work
               flow [fn:remember].  Capturing is controlled by ~org-remember.el~.

    + Set Up Capture :: set a default target file for notes, and define a global key for
      capturing new material.
      : (setq org-default-notes-file (concat org-directory "/notes.org"))
      : (define-key global-map "\C-cc" 'org-capture)

    + Use Capture :: ~C-c c~ is the basic command ~(org-capture)~; it has some alternates:

      + ~(org-capture &optional ARG)~ :: ~C-c c~; with a prefix ~C-u C-c c~, find the last stored
           capture; with two prefixes ~C-u C-u C-c c~, visit the last stored capture in a separate
           buffer.  Can also jump to the bookmark ~org-capture-last-stored~.  With a zero prefix
           ~C-0 C-c c~, insert the capture at point.
      + ~(org-capture-finalize)~ :: ~C-c C-c~
      + ~(org-capture-refile)~ :: ~C-c C-w~
      + ~(org-capture-kill)~ :: ~C-c C-k~

[fn:remember] Org’s method for capturing new items is heavily inspired by John Wiegley excellent
~remember.el~ package.]


  - Capture Templates :: You can use templates for different types of capture items, and for
       different target locations.  Because the code is quite complex, you should create new
       templates using the customize interface, using ~C-c c C~.

    See [[https://orgmode.org/manual/Capture-templates.html#Capture-templates][Capture Templates]] for full details

  - Category :: The /category/ is a broad label assigned to each agenda item.  By default, the
                category is simply derived from the file name.  You can specify a file-wide
                category using the in-buffer setting ~#+CATEGORY: Value~ outside of a heading.  A
                different in-buffer category can be added to a heading, or you can give each entry
                its own category with the ~:CATEGORY:Value~ property.  The AGENDA VIEW uses the
                category as the first item in a line.

  - Drawer (~:DRAWERNAME:~) :: A place to hide content and settings.  A drawer name is delimited by
       colons.  A drawer must be terminated by an ~:END:~ keyword.  Anything can go inside a
       /drawer/ except a heading and another drawer.

       ~C-c C-x d~ :: ~(org-insert-drawer &optional ARG DRAWER)~; interactively insert a drawer at
       point; with an active region, put the region inside a drawer; with a prefix argument, insert
       a /property drawer/ (see [[property-drawer][Property Drawer]]; see [[logbook-drawer][Logbook Drawer]]).

  - Footnote (~[fn:m]~) :: A footnote is started by a /footnote marker/ in square brackets in
       column 0, no indentation allowed. It ends at the next footnote definition, headline, or
       after two consecutive empty lines.  The /footnote reference/ is simply the /marker/ in
       square brackets, inside text.  Markers always start with ~fn:~.

       Footnote Example:
       : The Org homepage[fn:1] now looks a lot better than it used to.
       : ...
       : [fn:1] The link is: https://orgmode.org

       Footnotes may also be *named footnotes*: ~[fn:name]~ (name must be unique).

       Footnames may also be *inline footnotes*: ~[fn:inline definition]~.  This is basically a
       LaTeX-like anonymous footnote where the definition is given directly at the reference point.

       Finally, a hybrid footnote with both a label and an in-line definition, allowing further
       references to the same footnote.
       : [fn:name:a definition]

  - Keyword :: A ~TODO~ state, e.g. one of: ~TODO~ ~DONE~.  These are the default states.  You can
               customize the states using ~TODO~ kewords, e.g., ~TODO~ -> ~FEEDBACK~ -> ~VERIFY~ ->
               ~DONE~ | ~VERIFIED~.

               Org offers many facets to this functionality, all of which is configurable.  See
               [[https://orgmode.org/manual/Workflow-states.html#Workflow-states][TODO Keywords]] and [[https://orgmode.org/manual/TODO-extensions.html#TODO-extensions][Extended TODO Keywords]].

  - Outline :: Org is implemented on top of Outline mode.  Outlines allow a document to be
               organized in a hierarchical structure.  An overview of this structure is achieved by
               *folding* (/hiding/) large parts of the document to show only the general document
               structure and the parts currently being worked on.

    + ~<TAB>~ :: ~(org-cycle &optional ARG)~

         This function has many different semantic meanings depending upon its context and how many
         arguments precede it.

         When point is at the beginning of a headline, rotate the subtree through 3 different
                 states (called /local cycling/): FOLDED -> CHILDREN -> SUBTREE

         When called with a single prefix ~C-u~, rotate the buffer through 3 states (/global
         cycling/): OVERVIEW -> CONTENTS -> SHOW ALL

         When called with two prefix arguments (~C-u C-u~) switch to the startup visibility.

         When called with three prefix arguments (~C-u C-u C-u~) show the entire buffer, including
                 drawers.

    + ~<S-TAB>~ :: ~(org-shifttab & optional ARG)~

         Global visibility cycling (unless within a table; then ~(org-table-previous-field)~;

  - PROPERTY (~:PROPERTY:value~) :: A property is a key-value pair associated with an entry.
       Depending on how one is set up, it can be associated with a single entry or with a tree, or
       with every entry in a file.  Like a tag, a property is delimited on both ends by colons, so
       this is a property: ~:A_PROPERTY:Some value~.  The key portion is case-insensitive.

  - Property Drawer (~:PROPERTIES:...:END:~)<<property-drawer>> :: A drawer called ~:PROPERTIES:~,
       inside of which are kept various individual properties.

       ~C-u C-c C-x d~ :: (org-insert-drawer &optional ARG); insert a property drawer below the
       current headline.

  - Logbook Drawer (~:LOGBOOK:...:END:~)<<logbook-drawer>> :: A special drawer to store /state change notes/ and /clock
       times/.  See [[state-change][State Change]].

  - ~TODO~ STATE CHANGE<<state-change>> :: keep track of when a state change occurred and maybe
       take a note about this change.  You can either record just a timestamp, or a time-stamped
       note for a change.  These records will be inserted after the headline as an itemized list,
       newest first.

       To keep the notes hidden and out of the way, place them into a special drawer called
       ~:LOGBOOK:~.  [[logbook-drawer][Logbook Drawer]]   Globally customize the variable ~org-log-into-drawer~ to get
       this behavior.  You can also set a property called ~:LOG-INTO-DRAWER:DrawerName~.

       ~C-c C-z~ :: ~(org-add-note)~  add a note to the current entry

       To time-stamp when a ~TODO~ is changed to ~DONE~, set the variable ~org-log-done~ to the
       value of ~time~, or use the in-buffer setting of ~#+STARTUP: logdone~.  A line ~CLOSED:
       [timestamp]~ will be inserted.

       To also record a note when cycling a ~TODO~ to ~DONE~, set the variable ~org-log-done~ to
       the value ~note~ instead, or add an in-buffer setting of ~#+STARTUP: lognotedone~.

       To customize special logging for other state changes, see [[https://orgmode.org/manual/Tracking-TODO-state-changes.html#Tracking-TODO-state-changes][Tracking TODO State Changes]]

  - TAG (~:tag:~) :: Words delimited by colons (~:~) added to the end of a headline to give extra
                     context.
    ==> See [[https://orgmode.org/org.html#Tags][Tags]].  They can be stacked (called a /list of tags/): ~:tag1:tag2:~

    Tags are normal words containing /letters/, /numbers/, /underscores (_)/, and /ampersands (@)/.

    + ~C-c C-c~ :: activate changes to in-buffer settings

* Editing

* Navigating
