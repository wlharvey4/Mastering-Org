# -*-org-*-
#+title: Org Syntax and Org Parsing

* Org Syntax
This section describes  the [[https://orgmode.org/worg/dev/org-syntax.html][Org syntax]] as it is  currently read by its
parser in [[file:~/.emacs.d/elpa/org-9.4/org-element.el::;;; org-element.el --- Parser for Org Syntax -*- lexical-binding: t; -*-][~org-element.el~]] and the export framework.

** Four Context Free Elements
"Context-free" means that  an element can be recognized  by looking at
its  line   alone,  or  at   one  or   two  lines  above   it.   The
following four elements are context-free:

- Headline: can  contain a section
- Section: contains  directly any  greater element  or element  and is
  usually contained  by a  headline, except that  the text  before the
  first headline belongs  to a section that is not  contained inside a
  headline.
- Planning lines
- Property drawers

Every other syntactical part exists within specific environments.

*** Headline
The form of a Headline is:
: STARS KEYWORD PRIORITY TITLE TAGS

A Headline contains directly one Section (optionally), followed by any
number  of deeper  level headlines.

- =STARS= ::  a string starting at  column 0, containing at  least one
  asterisk, and ended  by a space character.  The  number of asterisks
  is used to define the level of the headline.

- =KEYWORD= ::  a TODO  keyword (must  belong to  the list  defined in
  ~org-todo-keywords-1~).  Case is significant.

- =PRIORITY= :: a  priority cookie, which is a  single letter preceded
  by a hash sign # and enclosed within square brackets.

- =TITLE= :: made of any character but a new line, excluding all other
  elements.

  - =COMMENTED=    ::   If the  first word appearing  in the  title is
    "COMMENT" (case  significant), the headline will  be considered as
    "commented".

  - =Footnote   Section= ::   If its  title is  ~org-footnote-section~
    (case significant), it will be considered as a “footnote section”

- =TAGS= ::  colon-separate words, which can  contain any alphanumeric
  characters, underscores, at-sign, hash sign, or percent sign.

  - =ARCHIVED=   ::   If "ARCHIVE"  (case significant)  is one  of its
    tags, it will be considered as “archived”.

*** Section
A Section contains directly any Greater Element or Element.  A Section
is contained inside a Headline, or comes before the first Headline.

*** Planning Line

*** Property Drawer

** Paragraph
A /paragraph/ is the basic unit  of measurement. If something does not
parse, then  it is  considered to  be a paragraph.  An /element/  is a
syntactical part that is at the  same level as a paragraph, i.e. which
cannot contain or be included in a paragraph.

** Environments
Environments fall into three categories:

1. *Object*:  a part that  can be included  in an element.

2.   *Element*:  a syntactical  part that  is at the  same level  as a
   paragraph; i.e.,  a part that  cannot contain  or be included  in a
   paragraph.

3.  *Greater  Element*:  a  syntactical part  that  can  contain  both
   elements and objects.

** Affiliated Keywords
Many element  types can  be assigned  *attributes* by  adding specific
keywords ("/affiliated keywords/") just  above the element considered.
The  next  section lists  those  elements  that /cannot/  be  assigned
attributes. All  others therefor can be.  "Affiliated keywords" follow
one of the following patterns:

#+begin_example
#+KEY: VALUE
#+KEY[OPTIONAL]: VALUE
#+ATTR_<BACKEND>: VALUE (multiple possible)
#+end_example

where =KEY= can be one of:

- =CAPTION= (multiple possible) (can contain objects)
- =CAPTION[OPTIONAL]=
- =HEADER= (multiple possible)
- =NAME=
- =PLOT=
- =RESULTS=
- =RESULTS[OPTIONAL]=


The parts =OPTIONAL= and =VALUE= can  contain any characters but a new
line.

*** Excluded Elements
The following elements /cannot/ be assigned attributes; every other
element, therefore, can.

- comment,
- clocks,
- headlines,
- inlinetasks,
- items,
- node properties,
- planning,
- property drawers,
- sections, and
- table rows,

** Greater Elements
Greater Elements  are "recursive element types."  Greater elements can
contain directly any other element or greater element except:
- elements of their own type,
- node properties, which can only be found in property drawers,
- items, which can only be found in plain lists.


The variable ~org-element-all-elements~ contains  the complete list of
all Greater Elements.

- ~org-element-greater-elements~ ::
  - ~center-block~
  - ~drawer~
  - ~dynamic-block~
  - ~footnote-definition~
  - ~headline~
  - ~inlinetask~
  - ~item~
  - ~plain-list~
  - ~property-drawer~
  - ~quote-block~
  - ~section~
  - ~special-block~
  - ~table~

*** Greater Blocks
Greater Blocks follow the following pattern:

#+begin_example
#+BEGIN_NAME PARAMETERS
CONTENTS
#+END_NAME
#+end_example

=NAME= can be:
- =CENTER= : "center block"
- =QUOTE= : "quote block"
- =SPECIAL= : =NAME= is neither =CENTER=, =QUOTE=, nor a "block element"


=CONTENTS= can contain  any element. Lines beginning  with an asterisk
must be quoted by a comma.

*** Drawers including Property Drawers
Pattern for drawers is:

#+begin_example
:NAME:
CONTENTS
:END:
#+end_example

=CONTENTS= can contain any element but another drawer.

*** Dynamic Blocks
Pattern for dynamic blocks is:

#+begin_example
#+BEGIN: NAME PARAMETERS
CONTENTS
#+END:
#+end_example

=NAME= cannot contain white space.

=PARAMETERS= are optional.

*** Footnote Definitions
Pattern for footnote definitions is:

: [fn:LABEL] CONTENTS

Must start at column 0.

=LABEL= is either a number or a word.

=CONTENTS= can contain any element except another footnote definition.

*** Inlinetasks

*** Plain Lists and Items

**** Items
Pattern for items:

: BULLET COUNTER-SET CHECK-BOX TAG

Only =BULLET= is mandatory.

=BULLET= is one of (followed by whitespace):
- asterisk =*=
- hyphen =-=
- plus sign =+=
- =COUNTER= (number or letter) =1=, =A=
- =COUNTER)= (number or letter) =1)=, =A)=


=COUNTER-SET= follows the pattern:
: [@COUNTER]

=CHECK-BOX= is one of:
- =[ ]=
- =[X]=
- =[-]=


=TAG= follows “TAG-TEXT ::” pattern

**** Plain List
A "plain list" is a set  of consecutive items of the same indentation.
It can only directly contain items.

**** Ordered Plain List
If first item in  a plain list has a counter in  its bullet, the plain
list will be an “ordered plain-list”.

**** Descriptive List
If it contains a tag, it will be a “descriptive list”

**** Unordered List
Otherwise, it will be an “unordered list”.

*** Property Drawers
Property drawers  are a special  type of drawer  containing properties
attached to  a headline. They are  located right after a  headline and
its planning information.

Property drawers follow the following patterns:

#+begin_example
HEADLINE
PROPERTYDRAWER

HEADLINE
PLANNING
PROPERTYDRAWER
#+end_example

=PROPERTYDRAWER= follows the following pattern:

#+begin_example
:PROPERTIES:
CONTENTS
:END:
#+end_example

=CONTENTS= consists of zero or  more /node properties/, which can only
exist in property drawers.

=NODE PROPERTIES= follow the following patterns:

#+begin_example
:NAME: VALUE

:NAME+: VALUE

:NAME:

:NAME+:
#+end_example

=VALUE= can be anything but the newline character.

*** Tables
Tables start at lines beginning with either:
- a vertical bar =|= (has "org" type); or
- the =+-= string followed by plus or minus signs only (~table.el~ type)


=Org tables= end at the first line not starting with a vertical bar.

~Table.el~ tables  end at the  first line  not starting with  either a
vertical line or a plus sign.

An =org  table= can only contain  table rows. A ~table.el~  table does
not contain anything.

One or  more “#+TBLFM: FORMULAS”  lines, where “FORMULAS”  can contain
any character, can follow an org table.

** Elements

The variable ~org-element-all-elements~ contains  the complete list of
all elements.

- ~org-element-all-elements~ ::
  - ~babel-call~
  - ~center-block~
  - ~clock~
  - ~comment~
  - ~comment-block~
  - ~diary-sexp~
  - ~drawer~
  - ~dynamic-block~
  - ~example-block~
  - ~export-block~
  - ~fixed-width~
  - ~footnote-definition~
  - ~headline~
  - ~horizontal-rule~
  - ~inlinetask~
  - ~item~
  - ~keyword~
  - ~latex-environment~
  - ~node-property~
  - ~paragraph~
  - ~plain-list~
  - ~planning~
  - ~property-drawer~
  - ~quote-block~
  - ~section~
  - ~special-block~
  - ~src-block~
  - ~table~
  - ~table-row~
  - ~verse-block~

Elements  cannot contain  other elements.  The following  elements can
contain objects:
- keywords whose name belongs to ~org-element-document-properties~
- verse blocks
- paragraphs
- table rows

*** Babel Call

*** Blocks

*** Clock---Diary Sexp---Planning

*** Comment

*** Fixed Width Area

*** Horizontal Rule

*** Keywords

*** LaTeX Environment

*** Node Properties

*** Paragraphs

*** Table Rows

** Objects
The variable  ~org-element-all-objects~ contains the complete  list of
all objects.

- ~org-element-all-objects~ ::
  - ~bold~
  - ~code~
  - ~entity~
  - ~export-snippet~
  - ~footnote-reference~
  - ~inline-babel-call~
  - ~inline-src-block~
  - ~italic~
  - ~line-break~
  - ~latex-fragment~
  - ~link~
  - ~macro~
  - ~radio-target~
  - ~statistics-cookie~
  - ~strike-through~
  - ~subscript~
  - ~superscript~
  - ~table-cell~
  - ~target~
  - ~timestamp~
  - ~underline~
  - ~verbatim~


Some    objects   are    "recursive",   listed    in   the    variable
~org-element-recursive-objects~:

- ~org-element-recursive-objects~ ::
  - ~bold~
  - ~footnote-reference~
  - ~italic~
  - ~link~
  - ~subscript~
  - ~radio-target~
  - ~strike-through~
  - ~superscript~
  - ~table-cell~
  - ~underline~


Most  objects cannot  contain objects.  Objects  can be  found in  the
following locations only:

- affiliated keywords defined in ~org-element-parsed-keywords~,
- document properties,
- headline titles,
- inlinetask titles,
- item tags,
- paragraphs,
- table cells,
- table rows, which can only contain table cell objects,
- verse blocks.

*** Entities and LaTeX Fragments

*** Export Snippets

*** Footnote References

*** Inline Babel Calls and Source Blocks

*** Line Breaks

*** Links

*** Macros

*** Targets and Radio Targets

*** Statistics Cookies

*** Subscript and Superscript

*** Table Cells

*** Timestamps

*** Text Markup

** Syntax Object
A /syntax object/ is represented as a list with the following pattern:
: (TYPE PROPERTIES CONTENTS)

- =TYPE= :: a symbol describing the object

- =PROPERTIES= :: the property list attached to the object

- =CONTENTS= :: a  list of syntax objects or raw  strings contained in
  the current object

*** Whole Document Object
- =TYP= :: ~org-data~

- =PROPERTIES= :: =nil=

- =CONTENTS= :: the whole document

* Org Parsing
[[file:~/.emacs.d/elpa/org-9.4/org-element.el::;;; org-element.el  --- Parser  for Org  Syntax -*-  lexical-binding: t;  -*-][~org-element.el~]] implements  a parser  according to  Org's syntax
specification.

** Org Parsers

*** org-element-parse-buffer &optional granularity visible-only
This  procedure  recursively  parses  Org syntax  inside  the  current
buffer,  taking into  account region,  narrowing, and  visibility. The
buffer's structure is returned.

=GRANULARITY= determines  the depth of  the recursion. It  is optional
and can be set to one of the following symbols:

- =headline= :: parse headlines only
- =greater-element= :: only recurse  into headlines and sections (only
  parse top-level elements)
- =element= :: parse everything but objects and plain text.
- =object= :: parse the complete buffer (the default)


=VISIBLE-ONLY= non-=nil=, do not parse contents of hidden elements.

**** Syntactic Element
An  element or  object is  represented as  a list  with the  following
pattern:

: (TYPE PROPERTIES CONTENTS)

- =TYPE= is a symbol describing the  element or object; it will be one
  element    of    the   variables    ~org-element-all-elements~    or
  ~org-element-all-objects~.  It's value  can  be  retrieved with  the
  procedure ~org-element-type~.

- =PROPERTIES= is the list of  /attributes/ attached to the element or
  object as a plist.  All types share the following attributes:
  - =:begin=
  - =:end=
  - =:post-blank=
  - =:parent=

  The  procedure ~org-element-property~  can  return the  =PROPERTIES=
  values.

- =CONTENTS= is a list of elements, objects, and raw strings contained
  in the  element or object. The  procedure ~org-element-contents~ can
  return the =CONTENTS= value.

*** org-element-parse-secondary-string string restriction &optional parent
This procedure  recursively parses objects  within a given  string and
returns its structure.

*** org-element-at-point

*** org-element-context &optional element

	returns smallest element or object around point
	return value is a list (TYPE PROPS)
	possible types are defined in 'org-element-all-elements and
				      'org-element-all-objects
	properties depend on element or object type
		always include:
			:begin :end :parent :post-blank


#+begin_comment
ORG SYNTAX
==========

Greater element: can contain directly any other element or greater element except:
	elements of their own type,
	node properties, which can only be found in property drawers,
	items, which can only be found in plain lists.
	Greater blocks
	Drawers; Property drawers
	Dynamic blocks
	Footnote definitions
	Inline tasks
	Plain lists; items
	Property drawers
	Tables
Elements
	cannot contain any other element.
	can contain objects:
		keywords whose name belongs to org-element-document-properties
		verse blocks
		paragraphs
		table rows
	Babel call
	Blocks
	Clock, Diary Sexp and Planning
	Comments
	Fixed-width area
	Horizontal rules
	Keywords
		#+KEY: VALUE
			KEY cannot eq CALL or any Affiliated Keyword
	LaTeX environments
	Node properties
		can only exist in property drawers
		:NAME: VALUE
		:NAME+: VALUE
		:NAME:
		:NAME+:
	Paragraphs
		the default element; any unrecognized context is a paragraph
		Empty lines and other elements end paragraphs
		Paragraphs can contain every type of object.
	Table rows
Objects
	only found in certain places
	most cannot contain objects (some can)
	Entities and LaTeX fragments
	Export snippets
	Footnote references
	Inline Babel Calls and Source Blocks
	Line breaks
	Links
		4 major types of links:
	Macros
	Targets and Radio Targets
	Statistics Cookies
	Subscript and Superscript
	Table Cells
	Timestamps
	Text Markup

ORG PARSER: Org Elements
========================
org-element-type
org-element-property
org-element-contents: AST
org-element-map: AST, list of elements or objects
org-element-put-property
org-element-extract-element
org-element-set-element
org-element-insert-before
org-element-adopt-element
org-element-interpret-data
org-element-lineage

org-element-all-elements
 (babel-call center-block clock comment comment-block diary-sexp drawer dynamic-block example-block export-block fixed-width footnote-definition headline horizontal-rule inlinetask item keyword latex-environment node-property paragraph plain-list planning property-drawer quote-block section special-block src-block table table-row verse-block)
org-element-all-objects
 (babel-call center-block clock comment comment-block diary-sexp drawer dynamic-block example-block export-block fixed-width footnote-definition headline horizontal-rule inlinetask item keyword latex-environment node-property paragraph plain-list planning property-drawer quote-block section special-block src-block table table-row verse-block)

greater element: :contents-begin :contents-end
element: :contents-begin :contents-end
object
properties: :begin :end :post-blank :parent :post-affiliated
types
attributes
affiliated keywords: :caption :header :name :plot :results :attr_NAME

keyword: element: :key :value
#+end_comment

* List of Procedures in ~org-element.el~

** RegExps
*** org-element--set-regexps ()
** Parser Internals
*** org-element-update-syntax ()
** Parse Brackets
*** org-element--parse-paired-brackets (char)
** Accessors and Setters
*** org-element-type (element)
*** org-element-property (property element)
*** org-element-contents (element)
*** org-element-restriction (element)
*** org-element-put-property (element property value)
*** org-element-set-contents (element &rest contents)
*** org-element-secondary-p (object)
*** org-element-class (datum &optional parent)
*** org-element-adopt-elements (parent &rest children)
*** org-element-extract-element (element)
*** org-element-insert-before (element location)
*** org-element-set-element (old new)
*** org-element-create (type &optional props &rest children)
*** org-element-copy (datum)
** Greater Elements
For each greater  element type, define a parser and  an interpreter.

A parser  returns the element or  object as the list  described above.
Parsing    functions    must    follow    the    naming    convention:
org-element-TYPE-parser,  where TYPE  is  greater  element's type,  as
defined in =org-element-greater-elements=.

An interpreter accepts  two arguments: the list  representation of the
element or object, and its contents.  The latter may be nil, depending
on the  element or object  considered. It returns the  appropriate Org
syntax, as a string. Similarly, interpreting functions must follow the
naming convention: =org-element-TYPE-interpreter=.

With the  exception of `headline'  and `item' types,  greater elements
cannot contain other greater elements of their own type.

*** Center Block
**** org-element-center-block-parser (limit affiliated)
**** org-element-center-block-interpreter (_ contents)
*** Drawer
**** org-element-drawer-parser (limit affiliated)
**** org-element-drawer-interpreter (drawer contents)
*** Dynamic Block
**** org-element-dynamic-block-parser (limit affiliated)
**** org-element-dynamic-block-interpreter (dynamic-block contents)
*** Footnote Definition
**** org-element-footnote-definition-parser (limit affiliated)
**** org-element-footnote-definition-interpreter (footnote-definition contents)
*** Headline
**** org-element--get-node-properties ()
**** org-element--get-time-properties ()
**** org-element-headline-parser (limit &optional raw-secondary-p)
**** org-element-headline-interpreter (headline contents)
*** Inlinetask
**** org-element-inlinetask-parser (limit &optional raw-secondary-p)
**** org-element-inlinetask-interpreter (inlinetask contents)
*** Item
**** org-element-item-parser (_ struct &optional raw-secondary-p)
**** org-element-item-interpreter (item contents)
*** Plain List
**** org-element--list-struct (limit)
**** org-element-plain-list-parser (limit affiliated structure)
**** org-element-plain-list-interpreter (_ contents)
*** Property Drawer
**** org-element-property-drawer-parser (limit)
**** org-element-property-drawer-interpreter (_ contents)
*** Quote Block
**** org-element-quote-block-parser (limit affiliated)
**** org-element-quote-block-interpreter (_ contents)
*** Section
**** org-element-section-parser (_)
**** org-element-section-interpreter (_ contents)
*** Special Block
**** org-element-special-block-parser (limit affiliated)
**** org-element-special-block-interpreter (special-block contents)
** Elements
For each element,  a parser and an interpreter are  also defined. Both
follow the same naming convention used for greater elements.
*** Babel Call
**** org-element-babel-call-parser (limit affiliated)
**** org-element-babel-call-interpreter (babel-call _)
*** Clock
**** org-element-clock-parser (limit)
**** org-element-clock-interpreter (clock _)
*** Comment
**** org-element-comment-parser (limit)
**** org-element-comment-interpreter (comment _)
*** Comment Block
**** org-element-comment-block-parser (limit affiliated)
**** org-element-comment-block-interpreter (comment-block _)
*** Diary Sexp
**** org-element-diary-sexp-parser (limit affiliated)
**** org-element-diary-sexp-interpreter (diary-sexp _)
*** Example Block
**** org-element-example-block-parser (limit affiliated)
**** org-element-example-block-interpreter (example-block _)
*** Export Block
**** org-element-export-block-parser (limit affiliated)
**** org-element-export-block-interpreter (export-block _)
*** Fixed-width
**** org-element-fixed-width-parser (limit affiliated)
**** org-element-fixed-width-interpreter (fixed-width _)
*** Horizontal Rule
**** org-element-horizontal-rule-parser (limit affiliated)
**** org-element-horizontal-rule-interpreter (&rest _)
*** Keyword
**** org-element-keyword-parser (limit affiliated)
**** org-element-keyword-interpreter (keyword _)
*** Latex Environment
**** org-element-latex-environment-interpreter (latex-environment _)
**** org-element-latex-environment-parser (limit affiliated)
*** Node Property
**** org-element-node-property-parser (limit)
**** org-element-node-property-interpreter (node-property _)
*** Paragraph
**** org-element-paragraph-parser (limit affiliated)
**** org-element-paragraph-interpreter (_ contents)
*** Planning
**** org-element-planning-parser (limit)
**** org-element-planning-interpreter (planning _)
*** Src Block
**** org-element-src-block-parser (limit affiliated)
**** org-element-src-block-interpreter (src-block _)
*** Table
**** org-element-table-parser (limit affiliated)
**** org-element-table-interpreter (table contents)
*** Table Row
**** org-element-table-row-parser (_)
**** org-element-table-row-interpreter (table-row contents)
*** Verse Block
**** org-element-verse-block-parser (limit affiliated)
**** org-element-verse-block-interpreter (_ contents)
** Objects
Raw text  can be  found between objects.  ~org-element--object-lex~ is
provided to find the next object in ;; buffer.
*** Bold
**** org-element-bold-parser ()
**** org-element-bold-interpreter (_ contents)
*** Code
**** org-element-code-parser ()
**** org-element-code-interpreter (code _)
*** Entity
**** org-element-entity-parser ()
**** org-element-entity-interpreter (entity _)
*** Export Snippet
**** org-element-export-snippet-interpreter (export-snippet _)
**** org-element-export-snippet-parser ()
*** Footnote Reference
**** org-element-footnote-reference-parser ()
**** org-element-footnote-reference-interpreter (footnote-reference contents)
*** Inline Babel Call
**** org-element-inline-babel-call-parser ()
**** org-element-inline-babel-call-interpreter (inline-babel-call _)
*** Inline Src Block
**** org-element-inline-src-block-parser ()
**** org-element-inline-src-block-interpreter (inline-src-block _)
*** Italic
**** org-element-italic-parser ()
**** org-element-italic-interpreter (_ contents)
*** Latex Fragment
**** org-element-latex-fragment-parser ()
**** org-element-latex-fragment-interpreter (latex-fragment _)
*** Line Break
**** org-element-line-break-parser ()
**** org-element-line-break-interpreter (&rest _)
*** Link
**** org-element-link-parser ()
**** org-element-link-interpreter (link contents)
*** Macro
**** org-element-macro-parser ()
**** org-element-macro-interpreter (macro _)
*** Radio-target
**** org-element-radio-target-parser ()
**** org-element-radio-target-interpreter (_ contents)
*** Statistics Cookie
**** org-element-statistics-cookie-parser ()
**** org-element-statistics-cookie-interpreter (statistics-cookie _)
*** Strike-Through
**** org-element-strike-through-parser ()
**** org-element-strike-through-interpreter (_ contents)
*** Subscript
**** org-element-subscript-parser ()
**** org-element-subscript-interpreter (subscript contents)
*** Superscript
**** org-element-superscript-parser ()
**** org-element-superscript-interpreter (superscript contents)
*** Table Cell
**** org-element-table-cell-parser ()
**** org-element-table-cell-interpreter (_ contents)
*** Target
**** org-element-target-parser ()
**** org-element-target-interpreter (target _)
*** Timestamp
**** org-element-timestamp-parser ()
**** org-element-timestamp-interpreter (timestamp _)
*** Underline
**** org-element-underline-parser ()
**** org-element-underline-interpreter (_ contents)
*** Verbatim
**** org-element-verbatim-parser ()
**** org-element-verbatim-interpreter (verbatim _)
** Parsing Element at Point
*** org-element--current-element (limit &optional granularity mode structure)
Returns the Lisp representation of the element starting at point.
*** org-element--collect-affiliated-keywords (limit parse)
** The Org Parser
*** org-element-parse-buffer (&optional granularity visible-only)
*** org-element-parse-secondary-string (string restriction &optional parent)
*** org-element-map
** Internal Parsing Procedures
*** org-element--next-mode (mode type parent?)
*** org-element--parse-elements
*** org-element--object-lex (restriction)
*** org-element--parse-objects (beg end acc restriction &optional parent)
** Interpret Data
*** org-element-interpret-data (data)
*** org-element--interpret-affiliated-keywords (element)
** Handle White Space
*** org-element-normalize-string (s)
*** org-element-normalize-contents (element &optional ignore-first)
** Cache
*** org-element--cache-key (element)
*** org-element--cache-generate-key (lower upper)
*** org-element--cache-key-less-p (a b)
*** org-element--cache-compare (a b)
*** org-element--cache-root ()
** Cache Tools
*** org-element--cache-active-p ()
*** org-element--cache-find (pos &optional side)
*** org-element--cache-put (element)
*** org-element--cache-remove (element)
** Cache Synchronization
*** org-element--cache-set-timer (buffer)
*** org-element--cache-interrupt-p (time-limit)
*** org-element--cache-shift-positions (element offset &optional props)
*** org-element--cache-sync (buffer &optional threshold future-change)
*** org-element--cache-process-request
*** org-element--parse-to (pos &optional syncp time-limit)
** Staging Buffer Changes
*** org-element--cache-before-change (beg end)
*** org-element--cache-after-change (beg end pre)
*** org-element--cache-for-removal (beg end offset)
*** org-element--cache-submit-request (beg end offset)
** Public Functions
*** org-element-cache-reset (&optional all)
*** org-element-cache-refresh (pos)
** Toolbox
First, implement  a way to  obtain the smallest element  at containing
point.

Next, implement a function to list all elements and objects containing
point.
*** org-element-at-point ()
*** org-element-context (&optional element)
*** org-element-lineage (datum &optional types with-self)
*** org-element-nested-p (elem-A elem-B)
*** org-element-swap-A-B (elem-A elem-B)
